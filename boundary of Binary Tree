/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void lefttraverse(TreeNode* root,vector<int> &ans){
        if((root==NULL) || (root->right ==NULL && root->left==NULL)){
            return;
        }
        ans.push_back(root->val);
        if(root->left){
            lefttraverse(root->left,ans);
        }
        else{
            lefttraverse(root->right,ans);
        }
    }
    void leaftraverse(TreeNode* root,vector<int> &ans){
        if(root==NULL){
            return;
        }
        if(root->right ==NULL && root->left==NULL){
            ans.push_back(root->val);
            return;
        }
        leaftraverse(root->left,ans);
        leaftraverse(root->right,ans);
    }
    void righttraverse(TreeNode* root,vector<int> &ans){
        if((root==NULL) || (root->right ==NULL && root->left==NULL)){
            return;
        }
        if(root->right){
            righttraverse(root->right,ans);
        }
        else{
            righttraverse(root->left,ans);
        }
        ans.push_back(root->val);
    }
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        ans.push_back(root->val);
        
        lefttraverse(root->left,ans);
        leaftraverse(root->left,ans);
        leaftraverse(root->right,ans);
        righttraverse(root->right,ans);
        return ans;
    }
};
